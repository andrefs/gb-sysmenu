#!/bin/bash
# Create virtual hosts on Apache

set -e
mkdir -p "$HOME/public_html"
sudo chmod -R a+rX $HOME/public_html
sudo chmod a+rx $HOME

read -p "Enter the domain name: (something like domain1.com) " -e DOMAIN
read -p "Do you want to clone an existing git repository? [y/N] "
if [[ "$REPLY" == "y" || "$REPLY" == "Y" ]]; then
	read -p "Enter the git repository URL: " -e GITADDR
	git clone $GITADDR $HOME/public_html/$DOMAIN
	DOMR=$(pwd)$(find | grep "site_files$" | sed "s/^\.//")
	if [ -n "$DOMR" ]; then
		mkdir -p $DOMR/{public,log}
		if [ -e "$DOMR/config" ]; then
			cd $DOMR/config
			for i in *.sample; do n=${i/.sample/}; cp $i $n; done
			cd -
		fi
	else
		DOMR="$HOME/public_html/$DOMAIN"
		mkdir -p $DOMR/{public,private,log,cgi-bin,backup}
	fi
else
	DOMR="$HOME/public_html/$DOMAIN"
	mkdir -p $DOMR/{public,private,log,cgi-bin,backup}
	echo "<html>
	  <head>
	    <title>$DOMAIN</title>
	  </head>
	  <body>
	    <h1>$DOMAIN</h1>
	  </body>
	</html>
	" > $DOMR/public/index.html
fi

echo "
# Place any notes or comments you have here
# It will make any customization easier to understand in the weeks to come

# domain: $DOMAIN
# public: $HOME/public_html/$DOMAIN/

<VirtualHost *:80>

  # Admin email, Server Name (domain name) and any aliases
  ServerAdmin webmaster@$DOMAIN
  ServerName  www.$DOMAIN
  ServerAlias $DOMAIN

  # Index file and Document Root (where the public files are located)
  DirectoryIndex index.html
  DocumentRoot $DOMR/public

  # Custom log file locations
  LogLevel warn
  ErrorLog  $DOMR/log/error.log
  CustomLog $DOMR/log/access.log combined

  <Directory $DOMR/public>
  Options -Indexes
  Options -Includes
  Options +SymLinksIfOwnerMatch
  #Options -FollowSymLinks
  AllowOverride All
  Options -MultiViews
  </Directory>

</VirtualHost>
" | sudo tee /etc/apache2/sites-available/$DOMAIN > /dev/null

sudo /usr/sbin/a2ensite $DOMAIN
sudo /etc/init.d/apache2 reload

read -p "Do you want to create a MySQL database for this domain? [Y/n] "
if [[ "$REPLY" == "n" || "$REPLY" == "N" ]]; then
	echo "Finished configuring $DOMAIN"
	exit 0
fi

DBNAME=`echo $DOMAIN | sed 's/[^a-zA-Z_]/_/g' | head -c 60`
DBUSER="`echo ${DBNAME} | head -c 14`_u"
p1=$(cat /dev/urandom | tr -dc bcdfghjklmnpqrstvxz | head -c 1)
p2=$(cat /dev/urandom | tr -dc aeiou | head -c 1)
p3=$(cat /dev/urandom | tr -dc bcdfghjklmnpqrstvxz | head -c 1)
p4=$(cat /dev/urandom | tr -dc aeiou | head -c 1)
DBPASS=${DBNAME}_$p1$p2$p3$p4
echo "Please enter the root password for MySQL:"
echo "Connecting to MySQL to create database and user. MySQL root password will be needed."
mysql -u root -p <<MSEND
CREATE DATABASE $DBNAME ;
GRANT ALL PRIVILEGES ON $DBNAME.* TO '$DBUSER'@'localhost' IDENTIFIED BY '$DBPASS';
FLUSH PRIVILEGES;
MSEND

echo "Created database $DBNAME with user $DBUSER and password $DBPASS."
echo "production:
  adapter: mysql
  database: $DBNAME
  username: $DBUSER
  password: $DBPASS
  host: localhost" > $DOMR/config/database.yml
echo "Please write down this data, you may need it later."
echo

export RAILS_ENV=production
GF=$(find $DOMR  | grep -e "Gemfile$" | head -1) 
if [[ -e $GF ]]; then
	GFPATH=$(dirname $GF)
	read -p "Do you want to install the ruby gems this app needs? [Y/n]"
	if [[ "$REPLY" != 'n' || "$REPLY" != 'N' ]]; then
		cd $GFPATH
		bundle install
		cd -
	fi
fi
echo
echo "Finished installing ruby gems with bundler."
echo "Finished configuring $DOMAIN"
